services:
  db:
    image: postgres:13-alpine
    container_name: star-burger-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    command: postgres -c shared_buffers=128MB
    ports:
      - "5433:5432"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U starburger_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/opt/StarBurgerDockerizations:delegated
      - static_volume:/opt/StarBurgerDockerizations/staticfiles
      - media_volume:/opt/StarBurgerDockerizations/media
      - frontend_bundles:/opt/StarBurgerDockerizations/bundles
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - YANDEX_GEOCODER_API_KEY=${YANDEX_GEOCODER_API_KEY}
    depends_on:
      db:
        condition: service_healthy
    command: python -m gunicorn star_burger.wsgi:application --bind 0.0.0.0:8000
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
      - frontend_bundles:/usr/share/nginx/html/bundles
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always

volumes:
  postgres_data:
  media_volume:
  static_volume:
  frontend_bundles: 